// ================================================================
//
// This software was developed by employees of the National Institute of
// Standards and Technology (NIST), an agency of the Federal Government.
// Pursuant to title 17 United States Code Section 105, works of NIST employees
// are not subject to copyright protection in the United States and are
// considered to be in the public domain. Permission to freely use, copy,
// modify, and distribute this software and its documentation without fee is
// hereby granted, provided that this notice and disclaimer of warranty appears
// in all copies.
//
// THE SOFTWARE IS PROVIDED 'AS IS' WITHOUT ANY WARRANTY OF ANY KIND, EITHER
// EXPRESSED, IMPLIED, OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, ANY
// WARRANTY THAT THE SOFTWARE WILL CONFORM TO SPECIFICATIONS, ANY IMPLIED
// WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, AND FREEDOM
// FROM INFRINGEMENT, AND ANY WARRANTY THAT THE DOCUMENTATION WILL CONFORM TO
// THE SOFTWARE, OR ANY WARRANTY THAT THE SOFTWARE WILL BE ERROR FREE. IN NO
// EVENT SHALL NIST BE LIABLE FOR ANY DAMAGES, INCLUDING, BUT NOT LIMITED TO,
// DIRECT, INDIRECT, SPECIAL OR CONSEQUENTIAL DAMAGES, ARISING OUT OF,
// RESULTING FROM, OR IN ANY WAY CONNECTED WITH THIS SOFTWARE, WHETHER OR NOT
// BASED UPON WARRANTY, CONTRACT, TORT, OR OTHERWISE, WHETHER OR NOT INJURY WAS
// SUSTAINED BY PERSONS OR PROPERTY OR OTHERWISE, AND WHETHER OR NOT LOSS WAS
// SUSTAINED FROM, OR AROSE OUT OF THE RESULTS OF, OR USE OF, THE SOFTWARE OR
// SERVICES PROVIDED HEREUNDER.
//
// Distributions of NIST software should also include copyright and licensing
// statements of any third-party software that are legally bundled with the
// code in compliance with the conditions of those licenses.
// 
// ================================================================

// ================================================================
// 
// Authors: Derek Juba <derek.juba@nist.gov>
// Created: 2019-07-26
//
// ================================================================

// Generated by Bisonc++ V6.01.00 on Fri, 26 Jul 2019 18:44:13 -0400

#ifndef xyz_parserXyzParser_h_included
#define xyz_parserXyzParser_h_included

// $insert baseclass
#include "XyzParserbase.h"
// $insert scanner.h
#include "XyzScanner.h"

#undef XyzParser
    // CAVEAT: between the baseclass-include directive and the 
    // #undef directive in the previous line references to XyzParser 
    // are read as XyzParserBase.
    // If you need to include additional headers in this file 
    // you should do so after these comment-lines.

#include <string>
#include <unordered_map>
#include <list>

#include "Geometry/MixedModel.h"

// $insert namespace-open
namespace xyz_parser
{

class XyzParser: public XyzParserBase
{
    // $insert scannerobject
    XyzScanner d_scanner;

    std::unordered_map<std::string, double> const * atomIdToRadius;
    std::list<zeno::MixedModel<double> > * snapshots;
    std::list<std::string> * comments;
    
    int numAtomsExpected;
    int numAtomsSeen;
        
    public:
        XyzParser
	  (std::unordered_map<std::string, double> const & atomIdToRadius,
           std::istream & in,
           std::list<zeno::MixedModel<double> > * snapshots,
	   std::list<std::string> * comments);
	
        int parse();

    private:
        void error();                   // called on (syntax) errors
        int lex();                      // returns the next token from the
                                        // lexical scanner. 
        void print();                   // use, e.g., d_token, d_loc
        void exceptionHandler(std::exception const &exc);

	void addSnapshot(int numAtoms);
	void addCommentWord(std::string commentWord);
	void addAtom(std::string id,
		     double x, double y, double z);
	
    // support functions for parse():
        void executeAction__(int ruleNr);
        void errorRecovery__();
        void nextCycle__();
        void nextToken__();
        void print__();
};

// $insert namespace-close
}

#endif
